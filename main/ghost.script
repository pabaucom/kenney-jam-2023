go.property("vis_distance", 450)
go.property("move_speed", 200)

local DESPAWN_DIST = 1000

function anim_idle(self)
	local pos = go.get_position()
	local move_left
	local move_right

	function move_left(self)
		sprite.set_hflip("#sprite", false)
		go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, pos.x - 200, go.EASING_INOUTSINE, 5, 0, move_right)
	end

	function move_right(self)
		sprite.set_hflip("#sprite", true)
		go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, pos.x + 200, go.EASING_INOUTSINE, 5, 0, move_left)
	end

	move_left(self)
end

function anim_attack(self)
	local current_pos = go.get_position()
	local target_pos = go.get_position(self.player)
	local distance = vmath.length(target_pos - current_pos)
	local duration = distance / self.move_speed
	go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, target_pos, go.EASING_LINEAR, duration, 0)

	if target_pos.x - current_pos.x >= 0 then
		sprite.set_hflip("#sprite", true)
	else
		sprite.set_hflip("#sprite", false)
	end
end

function init(self)
	self.player = msg.url("/infinite_map/player#player")
	self.controller = msg.url("/infinite_map/enemy_controller#enemy_controller")
	DESPAWN_DIST = go.get(self.controller, "spawn_radius") / 2 + 225

	local tint = go.get("#sprite", "tint")
	tint.w = 0.3
	go.set("#sprite", "tint", tint)
end

function update(self, dt)
	local pos = go.get_world_position()
	local player_pos = go.get_world_position(self.player)
	local dist = vmath.length(pos - player_pos)

	if dist >= DESPAWN_DIST then
		msg.post(self.controller, "delete_ghost", { id = go.get_id() })
	elseif dist >= self.vis_distance then
		if self.state ~= "idle" then
			msg.post("#sprite", "play_animation", { id = hash("ghost_normal") })
			go.cancel_animations(".")
			self.state = "idle"
			anim_idle(self)
		end
	elseif dist <= self.vis_distance then
		msg.post("#sprite", "play_animation", { id = hash("ghost") })
		self.state = "attack"
		anim_attack(self)

		if dist <= go.get(self.player, "light_dist") then
			msg.post(self.player, "ghost_near")
		end
	end
end
