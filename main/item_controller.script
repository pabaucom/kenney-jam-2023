go.property("spawn_radius", 4500)
go.property("high_count", 3)
go.property("med_count", 7)
go.property("low_count", 9)
go.property("safe_radius", 1500)

function spawn_item(self, type)
	local player_pos = go.get_world_position("player")
	local pos = vmath.vector3(0, 0, 0.4)

	repeat
		pos.x = player_pos.x + math.random(self.spawn_radius) - self.spawn_radius / 2
		pos.y = player_pos.y + math.random(self.spawn_radius) - self.spawn_radius / 2
	until vmath.length(player_pos - pos) >= self.safe_radius

	local id
	if type == "low" then
		id = factory.create("#fact_low", pos)
		go.set(msg.url(nil, id, "sprite"), "tint", vmath.vector4(0.3, 0.3, 0.3, 1))
		go.set(msg.url(nil, id, "light"), "tint", vmath.vector4(0, 0.5, 0, 0.5))
		go.set(msg.url(nil, id, "item"), "type", hash("low"))
	elseif type == "med" then
		id = factory.create("#fact_med", pos)
		go.set(msg.url(nil, id, "sprite"), "tint", vmath.vector4(0.3, 0.3, 0.3, 1))
		go.set(msg.url(nil, id, "light"), "tint", vmath.vector4(0, 0.5, 0.8, 0.6))
		go.set(msg.url(nil, id, "item"), "type", hash("med"))
	elseif type == "high" then
		id = factory.create("#fact_high", pos)
		go.set(msg.url(nil, id, "sprite"), "tint", vmath.vector4(0.3, 0.3, 0.3, 1))
		go.set(msg.url(nil, id, "light"), "tint", vmath.vector4(0.7, 0.6, 0, 0.6))
		go.set(msg.url(nil, id, "item"), "type", hash("high"))
	end

	msg.post(id, "set_parent", { parent_id = go.get_id("objects") })
	self.items[id] = { type = type }
end

function init(self)
	self.items = {}
end

function update(self, dt)
	local i = 1
	for id, item in pairs(self.items) do
		local pos = go.get_position(id)
		msg.post("@render:", "draw_text",
			{
				position = vmath.vector3(200, i * 20, 0),
				text = "ITEM " .. item.type .. " " .. ("%dx%d"):format(pos.x, pos.y)
			})
		i = i + 1
	end
end

local function delete_item(self, id)
	go.delete(id)
	self.items[id] = nil
end

function on_message(self, message_id, message, sender)
	if message_id == hash("delete_item") then
		local type = self.items[message.id].type
		delete_item(self, message.id)
		spawn_item(self, type)
	elseif message_id == hash("spawn_items") then
		for i = 1, self.low_count do
			spawn_item(self, "low")
		end
		for i = 1, self.med_count do
			spawn_item(self, "med")
		end
		for i = 1, self.high_count do
			spawn_item(self, "high")
		end
	elseif message_id == hash("clear_items") then
		for id, _ in pairs(self.items) do
			delete_item(self, id)
		end
	end
end
